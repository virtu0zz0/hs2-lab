hs2-lab
=======

#Лабораторная работа №2#
##Решение рекурсивных задач в функциональном стиле##

Цель работы: Знакомство с представлением рекурсивных структур данных в функциональных языках на примере списков

Задание: Дан поток студентов. Он представлен в виде списка, состоящего из элементов типа student. Полями этого типа являются:

- name — имя студента
- surname — его фамилия
- sex — пол
- day, month, year — дата его рождения
- group — номер группы
- iq — коэффициент IQ

Также есть другие три списка. Они состоят из фамилий и имён студентов, посещающих занятия по французскому, дискретной математике и
программированию соответственно. Фамилия и имя объединены в пару. Т.е. список выглядит так: ```[("Алексей", "Гронский"), ("Мария", "Иванова")]```.
Тип и списки оформлены в виде модуля и находится в файле ```Lab2.hs```. Ваша программа, использующая этот модуль может выглядеть как-то так:

``` haskell
import Lab2
main = do
putStrLn "Список имён студентов:"
mapM_ putStrLn $ map (\(pos, st) -> show pos ++ "). " ++ name st) $ zip [1..] students
```

##Варианты заданий:##

1. Составить список списков из студентов одинакового возраста (можно
рассматривать год рождения), отсортированный по количеству людей.
Пример: [["Новиков", "Шишкова", "Ширанков"], ["Петров", "Васечкин"],
["Дементьева"], ["Сидоров"]]
2. * Распределить студентов по 4 равным группам так, чтобы средний
показатель IQ (сумма IQ каждого студента в группе) для групп был
примерно одинаковым;
3. Распределить студентов по 6 равным группам по показателю IQ (в
первой группе участники с наименьшим IQ, в последней — с
наибольшим);
4. Составить список студентов, посещающих занятия и по дискретной
математике, и по французскому языку;
5. Узнать, какие студенты посещают все три представленных предмета;
6. Отсортировать список студентов по фамилии;
7. В отсортированный по фамилии список добавить нового студента:
{name="Василий", surname="Пупкин", sex='м', day=19, month=2,
year=1991, group=313, iq=120};
8. Удалить из списка всех студентов с фамилиями, начинающимися на
букву «А»;
9. Вычислить, какой предмет посещает больше всего студентов;
10. Узнать, какое имя самое популярное (встречается больше всего раз);
11. Вычислить средний возраст студентов;
12. Узнать для каждой группы, кого в ней больше: мальчиков или девочек;
13. Составить список студентов, посещающих занятия по
программированию, но не посещающих занятия по дискретной
математике;
14. Отсортировать список студентов по интеллекту;
15. Вывести отсортированный по группе список всех девочек, состоящий
только из имени, фамилии и номера группы;
16. «Записать» всех посещающих французский язык на программирование
(каждый студент в списке посещающих программирование может быть
записан только один раз);
17. Для всех студентов, посещающих дискретную математику: если он
записан на программирование, сделать так, чтобы на программирование
он записан не был, и наоборот (если не записан, то записать);
18. Узнать, есть ли на потоке студенты, празднующие день рождения в
один день. И, если таковые имеются, вывести их фамилии;
19. Увеличить у всех студентов номер группы на единицу в разряде сотен.
(Пример: 331 → 431);
20. Узнать, в каком диапазоне лежит iq студентов, какой коэффициент
встречается чаще других, а также найти математическое ожидание
этого распределения;
21. Узнать, на какой месяц выпадает больше всего дней рождений;
22. Создать для студентов, посещающих только один курс, новый курс
«Философия»
23. Добавить в список, представляющий курс дискретной математики, для
каждого студента информацию о его возрасте;
24. Разделить студентов по 4 спискам согласно номерам их групп;
25. Узнать, сколько студентов в каждой группе ;
26. Создать новый тип, в который бы входили поля: имя, фамилия,
инициалы, группа; и создать новый список из объектов этого типа на
основе существующего списка students;
27. Найти не посещающих ни один курс студентов;
28. Найти студентов, посещающих ровно два курса;
29. Создать новый тип «Курс». Создать три объекта этого типа для курсов
французского, дискретной математики и программирования на основе
соответствующих списков;
30. Отсортировать список студентов сначала по фамилии, а затем по
группе.
